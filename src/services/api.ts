/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseResultVoid
 */
export interface BaseResultVoid {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof BaseResultVoid
     */
    'success'?: boolean;
    /**
     * 错误码
     * @type {string}
     * @memberof BaseResultVoid
     */
    'code'?: string;
    /**
     * 返回消息
     * @type {string}
     * @memberof BaseResultVoid
     */
    'message'?: string;
    /**
     * 返回数据
     * @type {object}
     * @memberof BaseResultVoid
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface ListResultTestDto
 */
export interface ListResultTestDto {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof ListResultTestDto
     */
    'success'?: boolean;
    /**
     * 错误码
     * @type {string}
     * @memberof ListResultTestDto
     */
    'code'?: string;
    /**
     * 返回消息
     * @type {string}
     * @memberof ListResultTestDto
     */
    'message'?: string;
    /**
     * 返回数据
     * @type {Array<TestDto>}
     * @memberof ListResultTestDto
     */
    'data'?: Array<TestDto>;
}
/**
 * 创建时间
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    'nano'?: number;
}
/**
 * 返回数据
 * @export
 * @interface PageListTestDto
 */
export interface PageListTestDto {
    /**
     * 页码
     * @type {number}
     * @memberof PageListTestDto
     */
    'page'?: number;
    /**
     * 总记录数
     * @type {number}
     * @memberof PageListTestDto
     */
    'total'?: number;
    /**
     * 数据列表
     * @type {Array<TestDto>}
     * @memberof PageListTestDto
     */
    'list'?: Array<TestDto>;
}
/**
 * 
 * @export
 * @interface PageResultTestDto
 */
export interface PageResultTestDto {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof PageResultTestDto
     */
    'success'?: boolean;
    /**
     * 错误码
     * @type {string}
     * @memberof PageResultTestDto
     */
    'code'?: string;
    /**
     * 返回消息
     * @type {string}
     * @memberof PageResultTestDto
     */
    'message'?: string;
    /**
     * 
     * @type {PageListTestDto}
     * @memberof PageResultTestDto
     */
    'data'?: PageListTestDto;
}
/**
 * 
 * @export
 * @interface SingleResultLong
 */
export interface SingleResultLong {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof SingleResultLong
     */
    'success'?: boolean;
    /**
     * 错误码
     * @type {string}
     * @memberof SingleResultLong
     */
    'code'?: string;
    /**
     * 返回消息
     * @type {string}
     * @memberof SingleResultLong
     */
    'message'?: string;
    /**
     * 返回数据
     * @type {number}
     * @memberof SingleResultLong
     */
    'data'?: number;
}
/**
 * 
 * @export
 * @interface SingleResultTestDto
 */
export interface SingleResultTestDto {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof SingleResultTestDto
     */
    'success'?: boolean;
    /**
     * 错误码
     * @type {string}
     * @memberof SingleResultTestDto
     */
    'code'?: string;
    /**
     * 返回消息
     * @type {string}
     * @memberof SingleResultTestDto
     */
    'message'?: string;
    /**
     * 
     * @type {TestDto}
     * @memberof SingleResultTestDto
     */
    'data'?: TestDto;
}
/**
 * 测试信息
 * @export
 * @interface TestDto
 */
export interface TestDto {
    /**
     * 主键ID
     * @type {number}
     * @memberof TestDto
     */
    'id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof TestDto
     */
    'name'?: string;
    /**
     * 性别
     * @type {boolean}
     * @memberof TestDto
     */
    'sex'?: boolean;
    /**
     * 年龄
     * @type {number}
     * @memberof TestDto
     */
    'age'?: number;
    /**
     * 创建日期时间
     * @type {string}
     * @memberof TestDto
     */
    'createDateTime'?: string;
    /**
     * 创建日期
     * @type {string}
     * @memberof TestDto
     */
    'createDate'?: string;
    /**
     * 
     * @type {LocalTime}
     * @memberof TestDto
     */
    'createTime'?: LocalTime;
    /**
     * 状态
     * @type {string}
     * @memberof TestDto
     */
    'statusEnum'?: TestDtoStatusEnumEnum;
    /**
     * 状态2
     * @type {string}
     * @memberof TestDto
     */
    'statusEnum2'?: TestDtoStatusEnum2Enum;
}

/**
    * @export
    * @enum {string}
    */
export enum TestDtoStatusEnumEnum {
    Enable = 'ENABLE',
    Disable = 'DISABLE'
}
/**
    * @export
    * @enum {string}
    */
export enum TestDtoStatusEnum2Enum {
    Enable = 'ENABLE',
    Disable = 'DISABLE'
}

/**
 * 测试信息
 * @export
 * @interface TestPageParamDto
 */
export interface TestPageParamDto {
    /**
     * 页码
     * @type {number}
     * @memberof TestPageParamDto
     */
    'page'?: number;
    /**
     * 每页数量
     * @type {number}
     * @memberof TestPageParamDto
     */
    'pageSize'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof TestPageParamDto
     */
    'name'?: string;
}
/**
 * 测试参数信息
 * @export
 * @interface TestParamDto
 */
export interface TestParamDto {
    /**
     * 主键ID
     * @type {number}
     * @memberof TestParamDto
     */
    'id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof TestParamDto
     */
    'name'?: string;
    /**
     * 性别
     * @type {boolean}
     * @memberof TestParamDto
     */
    'sex'?: boolean;
    /**
     * 年龄
     * @type {number}
     * @memberof TestParamDto
     */
    'age'?: number;
    /**
     * 创建日期时间
     * @type {string}
     * @memberof TestParamDto
     */
    'createDateTime'?: string;
    /**
     * 创建日期
     * @type {string}
     * @memberof TestParamDto
     */
    'createDate'?: string;
    /**
     * 
     * @type {LocalTime}
     * @memberof TestParamDto
     */
    'createTime'?: LocalTime;
    /**
     * 状态
     * @type {string}
     * @memberof TestParamDto
     */
    'statusEnum'?: TestParamDtoStatusEnumEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TestParamDtoStatusEnumEnum {
    Enable = 'ENABLE',
    Disable = 'DISABLE'
}

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'mobileNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'status'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'createBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'createTime'?: string;
}

/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建test
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (testParamDto: TestParamDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testParamDto' is not null or undefined
            assertParamExists('createTest', 'testParamDto', testParamDto)
            const localVarPath = `/test/createTest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testParamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 异常
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/exception`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 异常2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/exception2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 异常3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception3: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/exception3`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id查询测试
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTestById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findTestById', 'id', id)
            const localVarPath = `/test/findTestById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统一返回--多条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResult: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/listResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统一返回--分页数据返回
         * @param {TestPageParamDto} testPageParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageResult: async (testPageParamDto: TestPageParamDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testPageParamDto' is not null or undefined
            assertParamExists('pageResult', 'testPageParamDto', testPageParamDto)
            const localVarPath = `/test/pageResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testPageParamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统一返回--无数据返回
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultBase: async (testParamDto: TestParamDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testParamDto' is not null or undefined
            assertParamExists('resultBase', 'testParamDto', testParamDto)
            const localVarPath = `/test/resultBase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testParamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统一返回--单条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleResult: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/singleResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 创建test
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(testParamDto: TestParamDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTest(testParamDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 异常
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exception(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResultLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exception(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 异常2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exception2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exception2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 异常3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exception3(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResultTestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exception3(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据id查询测试
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTestById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTestById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 统一返回--多条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResult(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResultTestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResult(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 统一返回--分页数据返回
         * @param {TestPageParamDto} testPageParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageResult(testPageParamDto: TestPageParamDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResultTestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageResult(testPageParamDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 统一返回--无数据返回
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resultBase(testParamDto: TestParamDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResultVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resultBase(testParamDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 统一返回--单条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleResult(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResultTestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleResult(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @summary 创建test
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(testParamDto: TestParamDto, options?: any): AxiosPromise<number> {
            return localVarFp.createTest(testParamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 异常
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception(options?: any): AxiosPromise<SingleResultLong> {
            return localVarFp.exception(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 异常2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception2(options?: any): AxiosPromise<BaseResultVoid> {
            return localVarFp.exception2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 异常3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exception3(options?: any): AxiosPromise<SingleResultTestDto> {
            return localVarFp.exception3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id查询测试
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTestById(id: number, options?: any): AxiosPromise<TestDto> {
            return localVarFp.findTestById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统一返回--多条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResult(options?: any): AxiosPromise<ListResultTestDto> {
            return localVarFp.listResult(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统一返回--分页数据返回
         * @param {TestPageParamDto} testPageParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageResult(testPageParamDto: TestPageParamDto, options?: any): AxiosPromise<PageResultTestDto> {
            return localVarFp.pageResult(testPageParamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统一返回--无数据返回
         * @param {TestParamDto} testParamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resultBase(testParamDto: TestParamDto, options?: any): AxiosPromise<BaseResultVoid> {
            return localVarFp.resultBase(testParamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统一返回--单条数据返回
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleResult(options?: any): AxiosPromise<SingleResultTestDto> {
            return localVarFp.singleResult(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @summary 创建test
     * @param {TestParamDto} testParamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public createTest(testParamDto: TestParamDto, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).createTest(testParamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 异常
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public exception(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).exception(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 异常2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public exception2(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).exception2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 异常3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public exception3(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).exception3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id查询测试
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public findTestById(id: number, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).findTestById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统一返回--多条数据返回
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public listResult(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).listResult(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统一返回--分页数据返回
     * @param {TestPageParamDto} testPageParamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public pageResult(testPageParamDto: TestPageParamDto, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).pageResult(testPageParamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统一返回--无数据返回
     * @param {TestParamDto} testParamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public resultBase(testParamDto: TestParamDto, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).resultBase(testParamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统一返回--单条数据返回
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public singleResult(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).singleResult(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userDTO: UserDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('createUser', 'userDTO', userDTO)
            const localVarPath = `/api/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/api/user/getUserById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userDTO: UserDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userDTO: UserDTO, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.createUser(userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUser(userDTO: UserDTO, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createUser(userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserById(id: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


